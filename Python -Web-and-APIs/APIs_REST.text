API
<Application Programming Interface>
- in computing and interface is a shared boundary through which 2 or more separate components of a computer system exchange
  information
- the exchange can be between software, peripheral devices, computer hardware, humans etc
THE API is software intermediary that allows 2 applications to talk to each other

we can encounter WEB APIs that talk to other WEB APIs such as POSTGRESQL- although it was not an web api
                     -it came in the form of Python code that we can import and use (psycopg2)
WEB APIs are not Python code so they work with evEry programming language

we can use web apis with REST AN SOAP
REST
stands for REPRESENTATIONAL STATE TRANSFER
            - DETERMINES HOW THE API LOOKS LIKE
            - IT IS  A SET OF RULES THAT DEVELOPERS FALLOW WHEN THEY CREATE THE API
                            one of the rules states that you should be able to get a piece of data (resource) when you
                            link to a specific URL
- it is an architectural style for providing standards between computer systems on the web making it easier
  for the systems to communicate with each other

  REST compliant systems are called RESTful
on the internet we have servers(Twitter server9 and clients(my pc for example)
REST specifies that the communication between those 2 is a
   CLIENT SERVER INTERFACE
        - the API lives on the server , my computer runs and asks it for things
                the client and server should be separate from each other and allowed to evolve independently
                           - for example, we should be able to make changes our application without impacting the
                            design or data structure of our server.
                           - we should be able to make changes in the server application without impacting the client.
    STATELESS
            - IT MEANS THAT THE SERVER DOESNT KNOW WHO IS WHO IN TERMS OF THE CLIENTS.
            THE SERVER DOESNT REMEMBER  WE ARE- means that a lot of people cna log in at the same  time
                                                and the server doesnt have to juggle information
       - calls are mde independently of one another, each call containing the data necessary to complete itself successfully
       - a REST API should not rely on data being stored in a server to determine what to do with it, but rather
         rely on the data being provided in the call itself
    CACHEBLE
            A RESTful API  should be designed to encourage the storage of chacheble data
            this means that when the date is cacheble, the data should be stored up to a certain time
                        by enabling this we will - REDUCE THE NUMBER OF INTERACTIONS WITH THE API
                                                 - REDUCE SERVER USAGE
                                                 - PROVIDE API USERS WITH THE TOOLS NECESSARY T PROVIDE THE FASTEST APPPS
    UNIFORM INTERFACE
                ALLOWS THE CLIENT TO TALK TO THE SERVER IN A SINGLE LANGUAGE, INDEPENDENT OF THE ARCHITECTURAL BACKEND
                IF THE SERVER IS COMPRISED OF MANY SERVERS, IT DOESN'T MATTER WHICH ONE WE ARE ASKING

HTTP and RESTful services

is a set of rules that we use to transfer data over the internet
the most commonly used HTTP methods/verbs and their CRUD counter parts:



POST/CREATE
    used to  CREATE new resources in particular subordinate resources to the PARENT RESOURCE
    when we create ea new resource, we post and service  will take care of associating it with the prent- assigning ID etc
    - are used to create a new resource into a collection of resources
              if a resource has been created on the origIn server, the code RESPONSE should eb 201(CREATED)+
              an entity which describes the status of the request and refers to the new resource
                    - many times the acTion may not result in a resource that can be identified by an URI
                                in this case the RESPONSE CODE 200 (OK) OR 204 (NO CONTENT)

GET/READ
    used to GET/REad a representation of a resource
    GET and HEAD requests are only used to read data not change it
    - in a non error mode we would get a 200  RESPONSE code (ok)
    - in an error environment we would get RESPONSE CODE  404 (not found) or 400 (bad request)
PUT/UPDATE
    is most often used for its updating capabilities
    if the resource does not exist then thE API may decide to create a new resource.
                    then the service API  must inform the user api that a new  resource has been created
                    with RESPONSE CODE 201(CREATED)
    if the resource is instead updated, then the server api must emit a RESPONSE CODE 200 (OK) or 204(NO CONTENT) response code

 THE DIFFERENCE BETWEEN PUT AND POST  IS THAT -PUT IS MADE TO A SINGLE ENTITY /RESOURCE
                                              -POST IS MADE TO RESOURCE COLLECTIONS
                                                    EXAMPLE:
                                                                HTTP PUT http://www.appdomain.com/users/123
                                                                HTTP POST http://www.appdomain.com/users
                                                                HTTP PUT http://www.appdomain.com/users/123/accounts/456
                                                                HTTP POST http://www.appdomain.com/users/123/accounts
PATCH/UPDATE/MODIFY
        is used to PARTIALLY MODIFY A RESOURCE
        while PUT modifies an entity in its entirety,
        PATCH partially modifies it
                example:
                        HTTP GET /users/1
                        produces below response:
                        {id: 1, username: 'admin', email: 'email@example.org'}

                        A sample patch request to update the email will be like this:

                        HTTP PATCH /users/1

                        [
                        { “op”: “replace”, “path”: “/email”, “value”: “new.email@example.org” } ]
DELETE/DELETE
        is used to delete resources
a successful deletion should return a HTTP RESPONSE CODE of:- 202 (OK)
                                                            - 202(ACCEPTED)  if the action has been queued
                                                            - 204 (NO CONTENT)- if the action has been performed but
                                                              the result does not include an entity

