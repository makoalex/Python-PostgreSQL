
GROUP BY
after we use one of the join methods we can remove the duplicates by using GROUP BY
it groups rows that have the same value
it is often used with AGGREGATE FUNCTIONS ( MAX, MIN , AVG, SUM, COUNT)
       SYNTAX:
            SELECT COLUMN NAME/* FROM TABLE1 INNER/LEFT/RIGHT JOIN TABLE 2 ON TABLE1.COLUMN NAME = TABLE2.COLUMN NAME
            GROUP BY COLUMN NAME
       WITH FUNCTION:
             SELECT FUNCT(COLUMN NAME) FROM TABLE 1 INNER JOIN TABLE2 ON ___,,___ ____,,___
              EXAMPLE FROM PGADMMIN4:
                                        select customers.first_name, customers.last_name, sum(items.price) from items inner join purchases
                                        on items.id = purchases.item_id
                                        inner join customers on customers.id = purchases.customer_id
                                        group by customers.id
                                        order by customers.last_name

ORDER BY

is used to sort the result in ascending or descending order
added at the end of the statement
gives the result by default in ascending order, so we must use DESC to get a descending order
LIMIT + number of results to be filtered
            SELECT* FROM TABLE NAME , ORDER BY NAME DESC LIMIT 1 - will return the lowest value


CREATE TABLE

            CREATE TABLE public. NAME OF THE TABLE(
                      NAME OF COLUMN1 datatype, NAME OF COLUMN 2 datatype...)
            a copy of an existing table can be created by using CREATE TABLE
            the table gets the same column definitions as the previous table. ALL OR SPECIFIC COLUMNS CAN BE SELECTED
            THE TABLE WILL BE FILLED WITH DATA FROM THE PRE EXISTING TABLE
              SYNTAX:
                      CREATE TABLE new name AS
                      SELECT COLUMN 1, COLUMN 2...
                      FROM pre existing table name
                      WHERE..

a table can have constraints:
                        added when you create the table or when you alter it after you specify the data type
                        CREATE TABLE NAME OF TABLE ( COLUMN 1 NAME, DATATYPE, CONSTRAINT...)
they are used to specify rules for the data in the table
used to limit the type of data that can go into a table

I. NOT NULL:- ENSURES THAT A COLUMN CANNOT HAVE A NULL VALUE
              it enforces a filed to always have a value

II. UNIQUE- ENSURES THAT ALL THE DATA IN A COLUMN IS UNIQUE.
           - a PRIMARY KEY has an automatic unique constraint
           can have multiple constraints  per table but only 1 PRIMARY KEY
III. PRIMARY KEY- UNIQUELY IDENTIFIES EACH RECORD IN A FILE
                - a table can have only one primary key, and this can consist of 1 or multiple columns
                - we can write the PRIMARY KEY immediately after the datatype, or added at the end
                                CONSTRAINT NAME.PKEY PRIMARY KEY(COLUMN NAME)
IV. FOREIGN KEY-IS USED TO LINK 2 TABLES TOGETHER.
                THE FOREIGN KEY IN A TABLE REFERS TO THE FOREIGN KEY IN ANOTHER TABLE.
                - the foreign key table is called the child key table
                use REFERENCES to create it:
                                            CREATE TABLE NAME orders( id integer Primary key,
                                                                       customer_id integer REFERENCES customers,
                                                                       oder .id integer, Not Null...)

V. CHECK- LIMITS THE VALUE RANGE THAT CAN BE PLACED INTO A COLUMN.
                                CREATE TABLE public. persons(name character varying (100),
                                                              Age integer Check (Age> 18))
VI. DEFAULT- IS USED TO ADD A DEFAULT VALUE TO A COLUMN
            - all new entries are going to be default unless another value is specified
                        CREATE TABLE public.Persons( id , integer PRIMARY KEY
                                                     NAME character varying (100) Not Null,
                                                     city character varying(100) Default 'oslo')

AUTO-INCREMENTING - 1. IS DONE BY CREATING A SEQUENCE
                       CREATE SEQUENCE + NAME ( usually table name_column name_seq)
                       normally whe we create the sequence it will start by default at value 1, but if we want start at
                       another value, we have to specify_ START+value to start at
                                    CREATE SEQUENCE users_id_seq START 3
                               a sequence is a special database object that generates integers
                        execute that
                    2. then we have to change the default value of the column to increment in our table:
                       ALTER TABLE:- CHANGES/ALTERS DATA FROM A TABLE
                               - can add, delete(DROP), a column
                        in our example:
                               ALTER TABLE public.users
                               ALTER COLUMN id
                               SET DEFAULT nextval ('users_id_seq')
                     3. last step is we have to tell our sequence that it belongs to id column,
                         so that when we don't need the table anymore and delete it , we also delete the sequence as we
                         will not be needing it
                         ALTER SEQUENCE TABLE NAME_COULMN NAME_SEQ OWNED BY TABLE_NAME.COLUMN NAME
                              EXAMPLE:
                                        ALTER SEQUENCE users_id_seq OWNED BY public.users.id
INDEX- special look up tables that databases can use to retrieve data faster
     - is a pointer to data in a table
     - it helps speed up select queries, and where clauses when confronted with big data tables
     SYNTAX:
              CREATE INDEX INDEX NAME ON TABLE NAME
   TYPES OF INDEXES:
        1. SINGLE COLUMN- created based only on one column of the table:
                                                                  CREATE INDEX  index name ON table name (COLUMN NAME)

        2. MULTI COLUMN- is the best choice if we use more than 1 column in the where clauses and filters.
                                                                 -CREATE INDEX  index name ON table name(COLUMN 1, COLUMN2..)

        3. UNIQUE- whenever we have data that is unique, we can create and unique index
                                                                  CREATE UNIQUE INDEX index name ON table name (COLUMN NAME)

indexes can be REINDEXED when an INDEX gets corrupted and starts working slower.
                                    SYNTAX:
                                            REINDEX INDEX index name

DROP TABLES- can be used to delete tables
           - if there are dependencies between tables we can use CASCADE which will remove the foreign key relationship between the tables
                            DROP TABLE table table name CASCADE

           - otherwise we delete the table that has the foreign key first
           - if we want to check if a table is in our database, in order to avoid getting an error and making the program crash:
           DROP table IF EXiSTS table name

IN OUR PROJECT EXAMPLE WE CAN HAVE 2 DIFFERENT SOLUTIONS TO  SAVING TO A DATABASE
        1.  where you fallow litral steps: open a connection, commit and close the connection
                  ex:
                    connection = psycopg2.connect(database="Learning", user='postgres', password='karenina', host='localhost',
                                      port=5433)
                    cursor = connection.cursor()
                    insert_query = 'Insert into Users (Email, First_Name, Last_name) values (%s, %s, %s)'
                    cursor.execute(insert_query, (self.email, self.first_name, self.last_name))
                    connection.commit()
                    connection.close()

        2. and one where you can skip the commmit and close part of the conection by using WITH statemment:
                     with psycopg2.connect(database="Learning", user='postgres', password='karenina', host='localhost',
                                           port=5433) as connection:
                         with connection.cursor() as cursor:
                                cursor.execute('Insert into Users (Email, First_Name, Last_name) values (%s, %s, %s)',
                                               (self.email, self.first_name, self.last_name))
                     first WITH statement open the connection and names it (AS CONNECTIO)
                     the second WITH creates the cursor object which will help us execute SQL commands.

